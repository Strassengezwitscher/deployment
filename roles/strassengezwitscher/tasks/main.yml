---

- name: Fetch repository
  git:
    accept_hostkey: yes
    force: yes
    repo: git@github.com:Strassengezwitscher/Strassengezwitscher.git
    dest: '{{ project_path }}/{{ dir }}/'
    version: '{{ branch }}'
  notify: restart uwsgi

- name: Install sensitive production django settings
  template:
    src: sensitive_settings.py.j2
    dest: '{{ project_path }}/{{ dir }}/{{ project_name }}/{{ project_name }}/settings/sensitive_settings.py'

- name: Restrict file-based access on Django app
  file:
    path: "{{ project_path }}/{{ dir }}/{{ project_name }}"
    recurse: yes
    mode: u=rwX,g=,o=

- name: Install angular configuration
  template:
    src: sensitive_conf.ts.j2
    dest: '{{ project_path }}/{{ dir }}/frontend/config/sensitive_conf.ts'

- name: Remove outdated dependencies
  command: npm prune
  args:
    chdir: '{{ project_path }}/{{ dir }}/'

- name: Install dependencies using npm
  npm:
    path: '{{ project_path }}/{{ dir }}'
    production: yes
    global: no

- name: Clean JS bundle and compilation results etc.
  command: gulp clean --production
  args:
    chdir: '{{ project_path }}/{{ dir }}/'
    removes: '{{ project_path }}/{{ dir }}/gulpfile.js' # run only if gulpfile.js exists (it is not removed)

- name: Build JS bundle
  command: gulp build --production
  args:
    chdir: '{{ project_path }}/{{ dir }}/'
    removes: '{{ project_path }}/{{ dir }}/gulpfile.js' # run only if gulpfile.js exists (it is not removed)

# In theory, you can create a virtualenv and install packages in there in one step. This worked with Python 2.
# With Python 3, the virtualenv was created, but the global pip2 executable was used for an unknown reason for the
# actual installation of packages instead of the pip executable from the virtualenv.
# Workaround with 2 steps:
#  1. We create a virtualenv. As this is done with the pip module and at least one package must be installed,
#     we make it install pip - which is installed by default in the virtualenv anyway.
#  2. We install the dependency packages and force the pip executabe to be the one from the virtualenv.
#     This leads to the packages being installed in the virtualenv.
- name: Create virtualenv
  pip:
    name: pip
    virtualenv: '{{ project_path }}/{{ dir }}/venv'
    virtualenv_python: python3

- name: Install python dependency packages in virtualenv
  pip:
    requirements: '{{ project_path }}/{{ dir }}/requirements.txt'
    executable: '{{ project_path }}/{{ dir }}/venv/bin/pip'

- name: Collect django staticfiles
  django_manage:
    app_path: '{{ project_path }}/{{ dir }}/{{ project_name }}/'
    command: collectstatic
    virtualenv: '{{ project_path }}/{{ dir }}/venv'
    settings: '{{ project_name }}.settings.production'

- name: Migrate django databases
  django_manage:
    app_path: '{{ project_path }}/{{ dir }}/{{ project_name }}/'
    command: migrate
    virtualenv: '{{ project_path }}/{{ dir }}/venv'
    settings: '{{ project_name }}.settings.production'

- name: create SHELL for cron
  cron:
    name: SHELL
    env: yes
    value: /bin/bash

- name: create cron job for fetching tweets
  cron:
    name: 'Fetch tweets for branch {{ branch }}'
    minute: '*/1'
    user: deploy
    job: >
      cd {{ project_path }}/{{ dir }} &&
      source venv/bin/activate &&
      crowdgezwitscher/manage.py fetch_tweets >> fetch_tweets.log 2>&1
